#!/bin/bash

d0=$(dirname "$0")
source "$d0/vars.sh"
source "$d0/_source.sh"

_dockeruser() {
  altname=$1
  export ALTGIT_SCRIPT_DIR=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
  [[ $altname ]] && USER_IMG=$USER_IMG-$altname || altname=$(get_user)
  export altname
  USER_TAG=$USER_IMG:$USER_VERSION

  CONTAINED_USER=$(get_user)
  already=$(docker images -f=reference="$USER_TAG" --format '{{.ID}}')
  [[ $already ]] || rocker_build || die "ERROR: $?: From rocker build."
  cd "$PWD0"

  already_running && join_current_container || run_new_container
}

rocker_build() {
  local return=0
  local cmd="rocker build -var BASE_TAG=$BASE_TAG -var USER_TAG=$USER_TAG"
  cmd="$cmd -var USER=$(get_user) -var UID=$(get_uid)"
  cmd="$cmd -var GROUP=$(get_group) -var GID=$(get_gid)"
  cmd="$cmd -f Dockerfile.user"
  local sets=$-; set -x
  cd "$ALTGIT_SCRIPT_DIR/docker_build_dir" || return $?
  $cmd || return=$?
  set +x; set -$sets
  return $return
}
already_running() {
  local already=$(docker ps -f name=$USER_IMG --format '{{.ID}}')
  [[ $already ]]
}
join_current_container() {
  local sets=$-; set -x
  docker exec -it \
    -e            ALTNAME=$altname \
    "$USER_IMG" bash || echo "ERROR: $?: From docker exec."
  set +x; set -$sets
}
run_new_container() {
  local sets=$-; set -x
  docker run --rm -it --name $USER_IMG \
    -e            ALTNAME=$altname \
    -v            ~/.ssh/:/resources/.ssh.gold:ro \
    -v      ~/.gitconfig/:/resources/.gitconfig.gold:ro \
    -v         $HOME/.aws:/resources/.aws.gold:ro \
    -v  $(get_host_share):$(get_container_share) \
    "$USER_TAG" bash || echo "ERROR: $?: From docker run."
  set +x; set -$sets
}

_dockeruser "$@"
